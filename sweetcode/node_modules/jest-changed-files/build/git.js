'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;

<<<<<<< HEAD
function path() {
  const data = _interopRequireWildcard(require('path'));

  path = function () {
=======
function _path() {
  const data = _interopRequireDefault(require('path'));

  _path = function _path() {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    return data;
  };

  return data;
}

function _execa() {
  const data = _interopRequireDefault(require('execa'));

<<<<<<< HEAD
  _execa = function () {
=======
  _execa = function _execa() {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

<<<<<<< HEAD
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj};
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
const findChangedFilesUsingCommand = async (args, cwd) => {
  let result;

  try {
    result = await (0, _execa().default)('git', args, {
      cwd
    });
  } catch (e) {
    // TODO: Should we keep the original `message`?
    e.message = e.stderr;
    throw e;
  }

  return result.stdout
    .split('\n')
    .filter(s => s !== '')
    .map(changedPath => path().resolve(cwd, changedPath));
};

const adapter = {
  findChangedFiles: async (cwd, options) => {
    var _options$includePaths;

    const changedSince = options.withAncestor ? 'HEAD^' : options.changedSince;
    const includePaths = (
      (_options$includePaths = options.includePaths) !== null &&
      _options$includePaths !== void 0
        ? _options$includePaths
        : []
    ).map(absoluteRoot => path().normalize(path().relative(cwd, absoluteRoot)));

    if (options.lastCommit) {
      return findChangedFilesUsingCommand(
        ['show', '--name-only', '--pretty=format:', 'HEAD', '--'].concat(
          includePaths
        ),
        cwd
      );
    }

    if (changedSince) {
      const [committed, staged, unstaged] = await Promise.all([
        findChangedFilesUsingCommand(
          ['diff', '--name-only', `${changedSince}...HEAD`, '--'].concat(
            includePaths
          ),
          cwd
        ),
        findChangedFilesUsingCommand(
          ['diff', '--cached', '--name-only', '--'].concat(includePaths),
          cwd
        ),
        findChangedFilesUsingCommand(
          [
            'ls-files',
            '--other',
            '--modified',
            '--exclude-standard',
            '--'
          ].concat(includePaths),
          cwd
        )
      ]);
      return [...committed, ...staged, ...unstaged];
    }

    const [staged, unstaged] = await Promise.all([
      findChangedFilesUsingCommand(
        ['diff', '--cached', '--name-only', '--'].concat(includePaths),
        cwd
      ),
      findChangedFilesUsingCommand(
        [
          'ls-files',
          '--other',
          '--modified',
          '--exclude-standard',
          '--'
        ].concat(includePaths),
        cwd
      )
    ]);
    return [...staged, ...unstaged];
  },
  getRoot: async cwd => {
    const options = ['rev-parse', '--show-cdup'];

    try {
      const result = await (0, _execa().default)('git', options, {
        cwd
      });
      return path().resolve(cwd, result.stdout);
    } catch {
      return null;
    }
  }
=======
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function() {
    var self = this,
      args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
      }
      _next(undefined);
    });
  };
}

const findChangedFilesUsingCommand =
  /*#__PURE__*/
  (function() {
    var _ref = _asyncToGenerator(function*(args, cwd) {
      const result = yield (0, _execa().default)('git', args, {
        cwd
      });
      return result.stdout
        .split('\n')
        .filter(s => s !== '')
        .map(changedPath => _path().default.resolve(cwd, changedPath));
    });

    return function findChangedFilesUsingCommand(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();

const adapter = {
  findChangedFiles: (function() {
    var _findChangedFiles = _asyncToGenerator(function*(cwd, options) {
      const changedSince =
        options && (options.withAncestor ? 'HEAD^' : options.changedSince);
      const includePaths = ((options && options.includePaths) || []).map(
        absoluteRoot =>
          _path().default.normalize(_path().default.relative(cwd, absoluteRoot))
      );

      if (options && options.lastCommit) {
        return findChangedFilesUsingCommand(
          ['show', '--name-only', '--pretty=format:', 'HEAD'].concat(
            includePaths
          ),
          cwd
        );
      } else if (changedSince) {
        const committed = yield findChangedFilesUsingCommand(
          [
            'log',
            '--name-only',
            '--pretty=format:',
            'HEAD',
            `^${changedSince}`
          ].concat(includePaths),
          cwd
        );
        const staged = yield findChangedFilesUsingCommand(
          ['diff', '--cached', '--name-only'].concat(includePaths),
          cwd
        );
        const unstaged = yield findChangedFilesUsingCommand(
          ['ls-files', '--other', '--modified', '--exclude-standard'].concat(
            includePaths
          ),
          cwd
        );
        return [...committed, ...staged, ...unstaged];
      } else {
        return findChangedFilesUsingCommand(
          ['ls-files', '--other', '--modified', '--exclude-standard'].concat(
            includePaths
          ),
          cwd
        );
      }
    });

    function findChangedFiles(_x3, _x4) {
      return _findChangedFiles.apply(this, arguments);
    }

    return findChangedFiles;
  })(),
  getRoot: (function() {
    var _getRoot = _asyncToGenerator(function*(cwd) {
      const options = ['rev-parse', '--show-cdup'];

      try {
        const result = yield (0, _execa().default)('git', options, {
          cwd
        });
        return _path().default.resolve(cwd, result.stdout);
      } catch (e) {
        return null;
      }
    });

    function getRoot(_x5) {
      return _getRoot.apply(this, arguments);
    }

    return getRoot;
  })()
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
};
var _default = adapter;
exports.default = _default;
