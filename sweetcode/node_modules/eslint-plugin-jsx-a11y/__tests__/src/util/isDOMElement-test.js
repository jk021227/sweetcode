<<<<<<< HEAD
import test from 'tape';
import { dom } from 'aria-query';
import { elementType } from 'jsx-ast-utils';

import isDOMElement from '../../../src/util/isDOMElement';
import JSXElementMock from '../../../__mocks__/JSXElementMock';

test('isDOMElement', (t) => {
  t.test('DOM elements', (st) => {
    dom.forEach((_, el) => {
      const element = JSXElementMock(el);

      st.equal(
        isDOMElement(elementType(element.openingElement)),
        true,
        `identifies ${el} as a DOM element`,
      );
    });

    st.end();
  });

  t.equal(
    isDOMElement(JSXElementMock('CustomElement')),
    false,
    'does not identify a custom element',
  );

  t.end();
=======
/* eslint-env mocha */
import { dom } from 'aria-query';
import expect from 'expect';
import { elementType } from 'jsx-ast-utils';
import isDOMElement from '../../../src/util/isDOMElement';
import JSXElementMock from '../../../__mocks__/JSXElementMock';

const domElements = [...dom.keys()];

describe('isDOMElement', () => {
  describe('DOM elements', () => {
    domElements.forEach((el) => {
      it(`should identify ${el} as a DOM element`, () => {
        const element = JSXElementMock(el);
        expect(isDOMElement(elementType(element.openingElement)))
          .toBe(true);
      });
    });
  });
  describe('Custom Element', () => {
    it('should not identify a custom element', () => {
      const element = JSXElementMock('CustomElement');
      expect(isDOMElement(element))
        .toBe(false);
    });
  });
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
});
