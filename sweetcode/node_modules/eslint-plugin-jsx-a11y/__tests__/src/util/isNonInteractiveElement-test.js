<<<<<<< HEAD
import test from 'tape';
import { elementType } from 'jsx-ast-utils';

=======
/* eslint-env mocha */
import expect from 'expect';
import { elementType } from 'jsx-ast-utils';
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
import isNonInteractiveElement from '../../../src/util/isNonInteractiveElement';
import {
  genElementSymbol,
  genIndeterminantInteractiveElements,
  genInteractiveElements,
  genInteractiveRoleElements,
  genNonInteractiveElements,
  genNonInteractiveRoleElements,
} from '../../../__mocks__/genInteractives';

<<<<<<< HEAD
test('isNonInteractiveElement', (t) => {
  t.equal(
    isNonInteractiveElement(undefined, []),
    false,
    'identifies JSX Components (no tagName) as non-interactive elements',
  );

  t.test('non-interactive elements', (st) => {
    genNonInteractiveElements().forEach(({ openingElement }) => {
      st.equal(
        isNonInteractiveElement(
          elementType(openingElement),
          openingElement.attributes,
        ),
        true,
        `identifies \`${genElementSymbol(openingElement)}\` as a non-interactive element`,
      );
    });

    st.end();
  });

  t.test('non-interactive role elements', (st) => {
    genNonInteractiveRoleElements().forEach(({ openingElement }) => {
      st.equal(
        isNonInteractiveElement(
          elementType(openingElement),
          openingElement.attributes,
        ),
        false,
        `identifies \`${genElementSymbol(openingElement)}\` as a non-interactive element`,
      );
    });

    st.end();
  });

  t.test('interactive elements', (st) => {
    genInteractiveElements().forEach(({ openingElement }) => {
      st.equal(
        isNonInteractiveElement(
          elementType(openingElement),
          openingElement.attributes,
        ),
        false,
        `identifies \`${genElementSymbol(openingElement)}\` as a non-interactive element`,
      );
    });

    st.end();
  });

  t.test('interactive role elements', (st) => {
    genInteractiveRoleElements().forEach(({ openingElement }) => {
      st.equal(
        isNonInteractiveElement(
          elementType(openingElement),
          openingElement.attributes,
        ),
        false,
        `identifies \`${genElementSymbol(openingElement)}\` as a non-interactive element`,
      );
    });

    st.end();
  });

  t.test('indeterminate elements', (st) => {
    genIndeterminantInteractiveElements().forEach(({ openingElement }) => {
      st.equal(
        isNonInteractiveElement(
          elementType(openingElement),
          openingElement.attributes,
        ),
        false,
        `identifies \`${genElementSymbol(openingElement)}\` as a non-interactive element`,
      );
    });

    st.end();
  });

  t.end();
=======
describe('isNonInteractiveElement', () => {
  describe('JSX Components (no tagName)', () => {
    it('should identify them as interactive elements', () => {
      expect(isNonInteractiveElement(undefined, []))
        .toBe(false);
    });
  });
  describe('non-interactive elements', () => {
    genNonInteractiveElements().forEach(({ openingElement }) => {
      it(`should identify \`${genElementSymbol(openingElement)}\` as a non-interactive element`, () => {
        expect(isNonInteractiveElement(
          elementType(openingElement),
          openingElement.attributes,
        )).toBe(true);
      });
    });
  });
  describe('non-interactive role elements', () => {
    genNonInteractiveRoleElements().forEach(({ openingElement }) => {
      it(`should NOT identify \`${genElementSymbol(openingElement)}\` as a non-interactive element`, () => {
        expect(isNonInteractiveElement(
          elementType(openingElement),
          openingElement.attributes,
        )).toBe(false);
      });
    });
  });
  describe('interactive elements', () => {
    genInteractiveElements().forEach(({ openingElement }) => {
      it(`should NOT identify \`${genElementSymbol(openingElement)}\` as a non-interactive element`, () => {
        expect(isNonInteractiveElement(
          elementType(openingElement),
          openingElement.attributes,
        )).toBe(false);
      });
    });
  });
  describe('interactive role elements', () => {
    genInteractiveRoleElements().forEach(({ openingElement }) => {
      it(`should NOT identify \`${genElementSymbol(openingElement)}\` as a non-interactive element`, () => {
        expect(isNonInteractiveElement(
          elementType(openingElement),
          openingElement.attributes,
        )).toBe(false);
      });
    });
  });
  describe('indeterminate elements', () => {
    genIndeterminantInteractiveElements().forEach(({ openingElement }) => {
      it(`should NOT identify \`${openingElement.name.name}\` as a non-interactive element`, () => {
        expect(isNonInteractiveElement(
          elementType(openingElement),
          openingElement.attributes,
        )).toBe(false);
      });
    });
  });
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
});
