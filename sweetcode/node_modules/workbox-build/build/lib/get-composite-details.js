"use strict";
<<<<<<< HEAD
=======

>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
<<<<<<< HEAD
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompositeDetails = void 0;
const crypto_1 = __importDefault(require("crypto"));
function getCompositeDetails(compositeURL, dependencyDetails) {
    let totalSize = 0;
    let compositeHash = '';
    for (const fileDetails of dependencyDetails) {
        totalSize += fileDetails.size;
        compositeHash += fileDetails.hash;
    }
    const md5 = crypto_1.default.createHash('md5');
    md5.update(compositeHash);
    const hashOfHashes = md5.digest('hex');
    return {
        file: compositeURL,
        hash: hashOfHashes,
        size: totalSize,
    };
}
exports.getCompositeDetails = getCompositeDetails;
=======
const crypto = require('crypto');

module.exports = (compositeURL, dependencyDetails) => {
  let totalSize = 0;
  let compositeHash = '';
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = dependencyDetails[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let fileDetails = _step.value;
      totalSize += fileDetails.size;
      compositeHash += fileDetails.hash;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  const md5 = crypto.createHash('md5');
  md5.update(compositeHash);
  const hashOfHashes = md5.digest('hex');
  return {
    file: compositeURL,
    hash: hashOfHashes,
    size: totalSize
  };
};
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
