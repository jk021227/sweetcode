"use strict";
<<<<<<< HEAD
/*
  Copyright 2021 Google LLC
=======

/*
  Copyright 2018 Google LLC
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
<<<<<<< HEAD
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFileDetails = void 0;
const glob_1 = __importDefault(require("glob"));
const upath_1 = __importDefault(require("upath"));
const errors_1 = require("./errors");
const get_file_size_1 = require("./get-file-size");
const get_file_hash_1 = require("./get-file-hash");
function getFileDetails({ globDirectory, globFollow, globIgnores, globPattern, globStrict, }) {
    let globbedFiles;
    let warning = '';
    try {
        globbedFiles = glob_1.default.sync(globPattern, {
            cwd: globDirectory,
            follow: globFollow,
            ignore: globIgnores,
            strict: globStrict,
        });
    }
    catch (err) {
        throw new Error(errors_1.errors['unable-to-glob-files'] +
            ` '${err instanceof Error && err.message ? err.message : ''}'`);
    }
    if (globbedFiles.length === 0) {
        warning =
            errors_1.errors['useless-glob-pattern'] +
                ' ' +
                JSON.stringify({ globDirectory, globPattern, globIgnores }, null, 2);
    }
    const globbedFileDetails = [];
    for (const file of globbedFiles) {
        const fullPath = upath_1.default.join(globDirectory, file);
        const fileSize = (0, get_file_size_1.getFileSize)(fullPath);
        if (fileSize !== null) {
            const fileHash = (0, get_file_hash_1.getFileHash)(fullPath);
            globbedFileDetails.push({
                file: `${upath_1.default.relative(globDirectory, fullPath)}`,
                hash: fileHash,
                size: fileSize,
            });
        }
    }
    return { globbedFileDetails, warning };
}
exports.getFileDetails = getFileDetails;
=======
const glob = require('glob');

const path = require('path');

const errors = require('./errors');

const getFileSize = require('./get-file-size');

const getFileHash = require('./get-file-hash');

module.exports = globOptions => {
  const globDirectory = globOptions.globDirectory,
        globFollow = globOptions.globFollow,
        globIgnores = globOptions.globIgnores,
        globPattern = globOptions.globPattern,
        globStrict = globOptions.globStrict;
  let globbedFiles;

  try {
    globbedFiles = glob.sync(globPattern, {
      cwd: globDirectory,
      follow: globFollow,
      ignore: globIgnores,
      strict: globStrict
    });
  } catch (err) {
    throw new Error(errors['unable-to-glob-files'] + ` '${err.message}'`);
  }

  if (globbedFiles.length === 0) {
    throw new Error(errors['useless-glob-pattern'] + ' ' + JSON.stringify({
      globDirectory,
      globPattern,
      globIgnores
    }, null, 2));
  }

  const fileDetails = globbedFiles.map(file => {
    const fullPath = path.join(globDirectory, file);
    const fileSize = getFileSize(fullPath);

    if (fileSize === null) {
      return null;
    }

    const fileHash = getFileHash(fullPath);
    return {
      file: `${path.relative(globDirectory, fullPath)}`,
      hash: fileHash,
      size: fileSize
    };
  }); // If !== null, means it's a valid file.

  return fileDetails.filter(details => details !== null);
};
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
