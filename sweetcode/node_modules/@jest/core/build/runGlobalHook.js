'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
<<<<<<< HEAD
exports.default = runGlobalHook;

function util() {
  const data = _interopRequireWildcard(require('util'));

  util = function () {
=======
exports.default = void 0;

function _pEachSeries() {
  const data = _interopRequireDefault(require('p-each-series'));

  _pEachSeries = function _pEachSeries() {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    return data;
  };

  return data;
}

function _transform() {
  const data = require('@jest/transform');

<<<<<<< HEAD
  _transform = function () {
=======
  _transform = function _transform() {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    return data;
  };

  return data;
}

<<<<<<< HEAD
function _prettyFormat() {
  const data = _interopRequireDefault(require('pretty-format'));

  _prettyFormat = function () {
=======
function _jestUtil() {
  const data = require('jest-util');

  _jestUtil = function _jestUtil() {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

<<<<<<< HEAD
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj};
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
async function runGlobalHook({allTests, globalConfig, moduleName}) {
  const globalModulePaths = new Set(
    allTests.map(test => test.context.config[moduleName])
  );

  if (globalConfig[moduleName]) {
    globalModulePaths.add(globalConfig[moduleName]);
  }

  if (globalModulePaths.size > 0) {
    for (const modulePath of globalModulePaths) {
      if (!modulePath) {
        continue;
      }

      const correctConfig = allTests.find(
        t => t.context.config[moduleName] === modulePath
      );
      const projectConfig = correctConfig
        ? correctConfig.context.config // Fallback to first config
        : allTests[0].context.config;
      const transformer = await (0, _transform().createScriptTransformer)(
        projectConfig
      );

      try {
        await transformer.requireAndTranspileModule(
          modulePath,
          async globalModule => {
            if (typeof globalModule !== 'function') {
              throw new TypeError(
                `${moduleName} file must export a function at ${modulePath}`
              );
            }

            await globalModule(globalConfig);
          }
        );
      } catch (error) {
        if (util().types.isNativeError(error)) {
          error.message = `Jest: Got error running ${moduleName} - ${modulePath}, reason: ${error.message}`;
          throw error;
        }

        throw new Error(
          `Jest: Got error running ${moduleName} - ${modulePath}, reason: ${(0,
          _prettyFormat().default)(error, {
            maxDepth: 3
          })}`
        );
      }
    }
  }
}
=======
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function() {
    var self = this,
      args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
      }
      _next(undefined);
    });
  };
}

var _default =
  /*#__PURE__*/
  (function() {
    var _ref = _asyncToGenerator(function*({
      allTests,
      globalConfig,
      moduleName
    }) {
      const globalModulePaths = new Set(
        allTests.map(test => test.context.config[moduleName])
      );

      if (globalConfig[moduleName]) {
        globalModulePaths.add(globalConfig[moduleName]);
      }

      if (globalModulePaths.size > 0) {
        yield (0, _pEachSeries().default)(
          Array.from(globalModulePaths),
          /*#__PURE__*/
          (function() {
            var _ref2 = _asyncToGenerator(function*(modulePath) {
              if (!modulePath) {
                return;
              }

              const correctConfig = allTests.find(
                t => t.context.config[moduleName] === modulePath
              );
              const projectConfig = correctConfig
                ? correctConfig.context.config // Fallback to first config
                : allTests[0].context.config;
              const transformer = new (_transform()).ScriptTransformer(
                projectConfig
              );
              yield transformer.requireAndTranspileModule(
                modulePath,
                /*#__PURE__*/
                (function() {
                  var _ref3 = _asyncToGenerator(function*(m) {
                    const globalModule = (0, _jestUtil().interopRequireDefault)(
                      m
                    ).default;

                    if (typeof globalModule !== 'function') {
                      throw new TypeError(
                        `${moduleName} file must export a function at ${modulePath}`
                      );
                    }

                    yield globalModule(globalConfig);
                  });

                  return function(_x3) {
                    return _ref3.apply(this, arguments);
                  };
                })()
              );
            });

            return function(_x2) {
              return _ref2.apply(this, arguments);
            };
          })()
        );
      }

      return Promise.resolve();
    });

    return function(_x) {
      return _ref.apply(this, arguments);
    };
  })();

exports.default = _default;
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
