'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
<<<<<<< HEAD
exports.createScriptTransformer = createScriptTransformer;
exports.createTranspilingRequire = createTranspilingRequire;

function _crypto() {
  const data = require('crypto');

  _crypto = function () {
=======
exports.default = void 0;

function _crypto() {
  const data = _interopRequireDefault(require('crypto'));

  _crypto = function _crypto() {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    return data;
  };

  return data;
}

<<<<<<< HEAD
function path() {
  const data = _interopRequireWildcard(require('path'));

  path = function () {
=======
function _path() {
  const data = _interopRequireDefault(require('path'));

  _path = function _path() {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    return data;
  };

  return data;
}

<<<<<<< HEAD
function _core() {
  const data = require('@babel/core');

  _core = function () {
    return data;
  };

  return data;
}

function _babelPluginIstanbul() {
  const data = _interopRequireDefault(require('babel-plugin-istanbul'));

  _babelPluginIstanbul = function () {
    return data;
  };

  return data;
}

function _convertSourceMap() {
  const data = require('convert-source-map');

  _convertSourceMap = function () {
    return data;
  };

  return data;
}

function _fastJsonStableStringify() {
  const data = _interopRequireDefault(require('fast-json-stable-stringify'));

  _fastJsonStableStringify = function () {
    return data;
  };

  return data;
}

function fs() {
  const data = _interopRequireWildcard(require('graceful-fs'));

  fs = function () {
    return data;
  };

  return data;
}

function _pirates() {
  const data = require('pirates');

  _pirates = function () {
    return data;
  };

  return data;
}

function _slash() {
  const data = _interopRequireDefault(require('slash'));

  _slash = function () {
    return data;
  };

  return data;
}

function _writeFileAtomic() {
  const data = require('write-file-atomic');

  _writeFileAtomic = function () {
    return data;
  };

  return data;
}

function _jestHasteMap() {
  const data = _interopRequireDefault(require('jest-haste-map'));

  _jestHasteMap = function () {
=======
function _vm() {
  const data = _interopRequireDefault(require('vm'));

  _vm = function _vm() {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    return data;
  };

  return data;
}

function _jestUtil() {
  const data = require('jest-util');

<<<<<<< HEAD
  _jestUtil = function () {
=======
  _jestUtil = function _jestUtil() {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    return data;
  };

  return data;
}

<<<<<<< HEAD
=======
function _gracefulFs() {
  const data = _interopRequireDefault(require('graceful-fs'));

  _gracefulFs = function _gracefulFs() {
    return data;
  };

  return data;
}

function _core() {
  const data = require('@babel/core');

  _core = function _core() {
    return data;
  };

  return data;
}

function _babelPluginIstanbul() {
  const data = _interopRequireDefault(require('babel-plugin-istanbul'));

  _babelPluginIstanbul = function _babelPluginIstanbul() {
    return data;
  };

  return data;
}

function _convertSourceMap() {
  const data = _interopRequireDefault(require('convert-source-map'));

  _convertSourceMap = function _convertSourceMap() {
    return data;
  };

  return data;
}

function _jestHasteMap() {
  const data = _interopRequireDefault(require('jest-haste-map'));

  _jestHasteMap = function _jestHasteMap() {
    return data;
  };

  return data;
}

function _fastJsonStableStringify() {
  const data = _interopRequireDefault(require('fast-json-stable-stringify'));

  _fastJsonStableStringify = function _fastJsonStableStringify() {
    return data;
  };

  return data;
}

function _slash() {
  const data = _interopRequireDefault(require('slash'));

  _slash = function _slash() {
    return data;
  };

  return data;
}

function _writeFileAtomic() {
  const data = _interopRequireDefault(require('write-file-atomic'));

  _writeFileAtomic = function _writeFileAtomic() {
    return data;
  };

  return data;
}

function _realpathNative() {
  const data = require('realpath-native');

  _realpathNative = function _realpathNative() {
    return data;
  };

  return data;
}

function _pirates() {
  const data = require('pirates');

  _pirates = function _pirates() {
    return data;
  };

  return data;
}

var _shouldInstrument = _interopRequireDefault(require('./shouldInstrument'));

>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
var _enhanceUnexpectedTokenMessage = _interopRequireDefault(
  require('./enhanceUnexpectedTokenMessage')
);

<<<<<<< HEAD
var _runtimeErrorsAndWarnings = require('./runtimeErrorsAndWarnings');

var _shouldInstrument = _interopRequireDefault(require('./shouldInstrument'));

=======
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

<<<<<<< HEAD
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj};
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}

=======
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

<<<<<<< HEAD
// Use `require` to avoid TS rootDir
const {version: VERSION} = require('../package.json');

// This data structure is used to avoid recalculating some data every time that
// we need to transform a file. Since ScriptTransformer is instantiated for each
// file we need to keep this object in the local scope of this module.
const projectCaches = new Map(); // To reset the cache for specific changesets (rather than package version).

const CACHE_VERSION = '1';

async function waitForPromiseWithCleanup(promise, cleanup) {
  try {
    await promise;
  } finally {
    cleanup();
  }
}

class ScriptTransformer {
  constructor(_config, _cacheFS) {
    _defineProperty(this, '_cache', void 0);

    _defineProperty(this, '_transformCache', new Map());

    _defineProperty(this, '_transformsAreLoaded', false);

    this._config = _config;
    this._cacheFS = _cacheFS;
    const configString = (0, _fastJsonStableStringify().default)(this._config);
    let projectCache = projectCaches.get(configString);

    if (!projectCache) {
      projectCache = {
        configString,
=======
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function() {
    var self = this,
      args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
      }
      _next(undefined);
    });
  };
}

// Use `require` to avoid TS rootDir
const _require = require('../package.json'),
  VERSION = _require.version; // This data structure is used to avoid recalculating some data every time that
// we need to transform a file. Since ScriptTransformer is instantiated for each
// file we need to keep this object in the local scope of this module.

const projectCaches = new WeakMap(); // To reset the cache for specific changesets (rather than package version).

const CACHE_VERSION = '1';

function waitForPromiseWithCleanup(_x, _x2) {
  return _waitForPromiseWithCleanup.apply(this, arguments);
}

function _waitForPromiseWithCleanup() {
  _waitForPromiseWithCleanup = _asyncToGenerator(function*(promise, cleanup) {
    try {
      yield promise;
    } finally {
      cleanup();
    }
  });
  return _waitForPromiseWithCleanup.apply(this, arguments);
}

class ScriptTransformer {
  constructor(config) {
    _defineProperty(this, '_cache', void 0);

    _defineProperty(this, '_config', void 0);

    _defineProperty(this, '_transformCache', void 0);

    _defineProperty(this, '_transformConfigCache', void 0);

    this._config = config;
    this._transformCache = new Map();
    this._transformConfigCache = new Map();
    let projectCache = projectCaches.get(config);

    if (!projectCache) {
      projectCache = {
        configString: (0, _fastJsonStableStringify().default)(this._config),
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
        ignorePatternsRegExp: calcIgnorePatternRegExp(this._config),
        transformRegExp: calcTransformRegExp(this._config),
        transformedFiles: new Map()
      };
<<<<<<< HEAD
      projectCaches.set(configString, projectCache);
=======
      projectCaches.set(config, projectCache);
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    }

    this._cache = projectCache;
  }

<<<<<<< HEAD
  _buildCacheKeyFromFileInfo(
    fileData,
    filename,
    transformOptions,
    transformerCacheKey
  ) {
    if (transformerCacheKey) {
      return (0, _crypto().createHash)('md5')
        .update(transformerCacheKey)
        .update(CACHE_VERSION)
        .digest('hex');
    }

    return (0, _crypto().createHash)('md5')
      .update(fileData)
      .update(transformOptions.configString)
      .update(transformOptions.instrument ? 'instrument' : '')
      .update(filename)
      .update(CACHE_VERSION)
      .digest('hex');
  }

  _getCacheKey(fileData, filename, options) {
    const configString = this._cache.configString;
    const {transformer, transformerConfig = {}} =
      this._getTransformer(filename) || {};
    let transformerCacheKey = undefined;
    const transformOptions = {
      ...options,
      cacheFS: this._cacheFS,
      config: this._config,
      configString,
      transformerConfig
    };

    if (
      typeof (transformer === null || transformer === void 0
        ? void 0
        : transformer.getCacheKey) === 'function'
    ) {
      transformerCacheKey = transformer.getCacheKey(
        fileData,
        filename,
        transformOptions
      );
    }

    return this._buildCacheKeyFromFileInfo(
      fileData,
      filename,
      transformOptions,
      transformerCacheKey
    );
  }

  async _getCacheKeyAsync(fileData, filename, options) {
    const configString = this._cache.configString;
    const {transformer, transformerConfig = {}} =
      this._getTransformer(filename) || {};
    let transformerCacheKey = undefined;
    const transformOptions = {
      ...options,
      cacheFS: this._cacheFS,
      config: this._config,
      configString,
      transformerConfig
    };

    if (transformer) {
      const getCacheKey =
        transformer.getCacheKeyAsync || transformer.getCacheKey;

      if (typeof getCacheKey === 'function') {
        transformerCacheKey = await getCacheKey(
          fileData,
          filename,
          transformOptions
        );
      }
    }

    return this._buildCacheKeyFromFileInfo(
      fileData,
      filename,
      transformOptions,
      transformerCacheKey
    );
  }

  _createFolderFromCacheKey(filename, cacheKey) {
    const HasteMapClass = _jestHasteMap().default.getStatic(this._config);

    const baseCacheDir = HasteMapClass.getCacheFilePath(
      this._config.cacheDirectory,
      'jest-transform-cache-' + this._config.name,
      VERSION
    ); // Create sub folders based on the cacheKey to avoid creating one
    // directory with many files.

    const cacheDir = path().join(baseCacheDir, cacheKey[0] + cacheKey[1]);
    const cacheFilenamePrefix = path()
      .basename(filename, path().extname(filename))
      .replace(/\W/g, '');
    const cachePath = (0, _slash().default)(
      path().join(cacheDir, cacheFilenamePrefix + '_' + cacheKey)
=======
  _getCacheKey(fileData, filename, instrument) {
    const configString = this._cache.configString;

    const transformer = this._getTransformer(filename);

    if (transformer && typeof transformer.getCacheKey === 'function') {
      return _crypto()
        .default.createHash('md5')
        .update(
          transformer.getCacheKey(fileData, filename, configString, {
            config: this._config,
            instrument,
            rootDir: this._config.rootDir
          })
        )
        .update(CACHE_VERSION)
        .digest('hex');
    } else {
      return _crypto()
        .default.createHash('md5')
        .update(fileData)
        .update(configString)
        .update(instrument ? 'instrument' : '')
        .update(filename)
        .update(CACHE_VERSION)
        .digest('hex');
    }
  }

  _getFileCachePath(filename, content, instrument) {
    const baseCacheDir = _jestHasteMap().default.getCacheFilePath(
      this._config.cacheDirectory,
      'jest-transform-cache-' + this._config.name,
      VERSION
    );

    const cacheKey = this._getCacheKey(content, filename, instrument); // Create sub folders based on the cacheKey to avoid creating one
    // directory with many files.

    const cacheDir = _path().default.join(
      baseCacheDir,
      cacheKey[0] + cacheKey[1]
    );

    const cacheFilenamePrefix = _path()
      .default.basename(filename, _path().default.extname(filename))
      .replace(/\W/g, '');

    const cachePath = (0, _slash().default)(
      _path().default.join(cacheDir, cacheFilenamePrefix + '_' + cacheKey)
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    );
    (0, _jestUtil().createDirectory)(cacheDir);
    return cachePath;
  }

<<<<<<< HEAD
  _getFileCachePath(filename, content, options) {
    const cacheKey = this._getCacheKey(content, filename, options);

    return this._createFolderFromCacheKey(filename, cacheKey);
  }

  async _getFileCachePathAsync(filename, content, options) {
    const cacheKey = await this._getCacheKeyAsync(content, filename, options);
    return this._createFolderFromCacheKey(filename, cacheKey);
  }

=======
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
  _getTransformPath(filename) {
    const transformRegExp = this._cache.transformRegExp;

    if (!transformRegExp) {
      return undefined;
    }

    for (let i = 0; i < transformRegExp.length; i++) {
      if (transformRegExp[i][0].test(filename)) {
<<<<<<< HEAD
        return transformRegExp[i][1];
=======
        const transformPath = transformRegExp[i][1];

        this._transformConfigCache.set(transformPath, transformRegExp[i][2]);

        return transformPath;
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
      }
    }

    return undefined;
  }

<<<<<<< HEAD
  async loadTransformers() {
    await Promise.all(
      this._config.transform.map(
        async ([, transformPath, transformerConfig]) => {
          let transformer = await (0, _jestUtil().requireOrImportModule)(
            transformPath
          );

          if (!transformer) {
            throw new Error(
              (0, _runtimeErrorsAndWarnings.makeInvalidTransformerError)(
                transformPath
              )
            );
          }

          if (typeof transformer.createTransformer === 'function') {
            transformer = transformer.createTransformer(transformerConfig);
          }

          if (
            typeof transformer.process !== 'function' &&
            typeof transformer.processAsync !== 'function'
          ) {
            throw new Error(
              (0, _runtimeErrorsAndWarnings.makeInvalidTransformerError)(
                transformPath
              )
            );
          }

          const res = {
            transformer,
            transformerConfig
          };

          this._transformCache.set(transformPath, res);
        }
      )
    );
    this._transformsAreLoaded = true;
  }

  _getTransformer(filename) {
    if (!this._transformsAreLoaded) {
      throw new Error(
        'Jest: Transformers have not been loaded yet - make sure to run `loadTransformers` and wait for it to complete before starting to transform files'
      );
    }

    if (this._config.transform.length === 0) {
=======
  _getTransformer(filename) {
    let transform = null;

    if (!this._config.transform || !this._config.transform.length) {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
      return null;
    }

    const transformPath = this._getTransformPath(filename);

<<<<<<< HEAD
    if (!transformPath) {
      return null;
    }

    const cached = this._transformCache.get(transformPath);

    if (cached) {
      return cached;
    }

    throw new Error(
      `Jest was unable to load the transformer defined for ${filename}. This is a bug in Jest, please open up an issue`
    );
  }

  _instrumentFile(filename, input, canMapToInput, options) {
    const inputCode = typeof input === 'string' ? input : input.code;
    const inputMap = typeof input === 'string' ? null : input.map;
    const result = (0, _core().transformSync)(inputCode, {
=======
    if (transformPath) {
      const transformer = this._transformCache.get(transformPath);

      if (transformer != null) {
        return transformer;
      }

      transform = require(transformPath);

      const transformerConfig = this._transformConfigCache.get(transformPath);

      if (typeof transform.createTransformer === 'function') {
        transform = transform.createTransformer(transformerConfig);
      }

      if (typeof transform.process !== 'function') {
        throw new TypeError(
          'Jest: a transform must export a `process` function.'
        );
      }

      this._transformCache.set(transformPath, transform);
    }

    return transform;
  }

  _instrumentFile(filename, content) {
    const result = (0, _core().transformSync)(content, {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
      auxiliaryCommentBefore: ' istanbul ignore next ',
      babelrc: false,
      caller: {
        name: '@jest/transform',
<<<<<<< HEAD
        supportsDynamicImport: options.supportsDynamicImport,
        supportsExportNamespaceFrom: options.supportsExportNamespaceFrom,
        supportsStaticESM: options.supportsStaticESM,
        supportsTopLevelAwait: options.supportsTopLevelAwait
=======
        supportsStaticESM: false
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
      },
      configFile: false,
      filename,
      plugins: [
        [
          _babelPluginIstanbul().default,
          {
            compact: false,
            // files outside `cwd` will not be instrumented
            cwd: this._config.rootDir,
            exclude: [],
<<<<<<< HEAD
            extension: false,
            inputSourceMap: inputMap,
            useInlineSourceMaps: false
          }
        ]
      ],
      sourceMaps: canMapToInput ? 'both' : false
    });

    if (result && result.code) {
      return result;
    }

    return input;
  }

  _buildTransformResult(
    filename,
    cacheFilePath,
    content,
    transformer,
    shouldCallTransform,
    options,
    processed,
    sourceMapPath
  ) {
=======
            useInlineSourceMaps: false
          }
        ]
      ]
    });

    if (result) {
      const code = result.code;

      if (code) {
        return code;
      }
    }

    return content;
  }

  _getRealPath(filepath) {
    try {
      return (0, _realpathNative().sync)(filepath) || filepath;
    } catch (err) {
      return filepath;
    }
  } // We don't want to expose transformers to the outside - this function is just
  // to warm up `this._transformCache`

  preloadTransformer(filepath) {
    this._getTransformer(filepath);
  }

  transformSource(filepath, content, instrument) {
    const filename = this._getRealPath(filepath);

    const transform = this._getTransformer(filename);

    const cacheFilePath = this._getFileCachePath(filename, content, instrument);

    let sourceMapPath = cacheFilePath + '.map'; // Ignore cache if `config.cache` is set (--no-cache)

    let code = this._config.cache ? readCodeCacheFile(cacheFilePath) : null;
    const shouldCallTransform = transform && this.shouldTransform(filename); // That means that the transform has a custom instrumentation
    // logic and will handle it based on `config.collectCoverage` option

    const transformWillInstrument =
      shouldCallTransform && transform && transform.canInstrument; // If we handle the coverage instrumentation, we should try to map code
    // coverage against original source with any provided source map

    const mapCoverage = instrument && !transformWillInstrument;

    if (code) {
      // This is broken: we return the code, and a path for the source map
      // directly from the cache. But, nothing ensures the source map actually
      // matches that source code. They could have gotten out-of-sync in case
      // two separate processes write concurrently to the same cache files.
      return {
        code,
        mapCoverage,
        sourceMapPath
      };
    }

>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    let transformed = {
      code: content,
      map: null
    };

<<<<<<< HEAD
    if (transformer && shouldCallTransform) {
=======
    if (transform && shouldCallTransform) {
      const processed = transform.process(content, filename, this._config, {
        instrument
      });

>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
      if (typeof processed === 'string') {
        transformed.code = processed;
      } else if (processed != null && typeof processed.code === 'string') {
        transformed = processed;
      } else {
<<<<<<< HEAD
        throw new Error(
          (0, _runtimeErrorsAndWarnings.makeInvalidReturnValueError)()
=======
        throw new TypeError(
          "Jest: a transform's `process` function must return a string, " +
            'or an object with `code` key containing this string.'
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
        );
      }
    }

    if (!transformed.map) {
<<<<<<< HEAD
      try {
        //Could be a potential freeze here.
        //See: https://github.com/facebook/jest/pull/5177#discussion_r158883570
        const inlineSourceMap = (0, _convertSourceMap().fromSource)(
          transformed.code
        );

        if (inlineSourceMap) {
          transformed.map = inlineSourceMap.toObject();
        }
      } catch {
        const transformPath = this._getTransformPath(filename);

        invariant(transformPath);
        console.warn(
          (0, _runtimeErrorsAndWarnings.makeInvalidSourceMapWarning)(
            filename,
            transformPath
          )
        );
      }
    } // That means that the transform has a custom instrumentation
    // logic and will handle it based on `config.collectCoverage` option

    const transformWillInstrument =
      shouldCallTransform && transformer && transformer.canInstrument; // Apply instrumentation to the code if necessary, keeping the instrumented code and new map

    let map = transformed.map;
    let code;

    if (!transformWillInstrument && options.instrument) {
      /**
       * We can map the original source code to the instrumented code ONLY if
       * - the process of transforming the code produced a source map e.g. ts-jest
       * - we did not transform the source code
       *
       * Otherwise we cannot make any statements about how the instrumented code corresponds to the original code,
       * and we should NOT emit any source maps
       *
       */
      const shouldEmitSourceMaps =
        (transformer != null && map != null) || transformer == null;

      const instrumented = this._instrumentFile(
        filename,
        transformed,
        shouldEmitSourceMaps,
        options
      );

      code =
        typeof instrumented === 'string' ? instrumented : instrumented.code;
      map = typeof instrumented === 'string' ? null : instrumented.map;
=======
      //Could be a potential freeze here.
      //See: https://github.com/facebook/jest/pull/5177#discussion_r158883570
      const inlineSourceMap = _convertSourceMap().default.fromSource(
        transformed.code
      );

      if (inlineSourceMap) {
        transformed.map = inlineSourceMap.toJSON();
      }
    }

    if (!transformWillInstrument && instrument) {
      code = this._instrumentFile(filename, transformed.code);
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    } else {
      code = transformed.code;
    }

<<<<<<< HEAD
    if (map) {
      const sourceMapContent =
        typeof map === 'string' ? map : JSON.stringify(map);
      invariant(sourceMapPath, 'We should always have default sourceMapPath');
=======
    if (transformed.map) {
      const sourceMapContent =
        typeof transformed.map === 'string'
          ? transformed.map
          : JSON.stringify(transformed.map);
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
      writeCacheFile(sourceMapPath, sourceMapContent);
    } else {
      sourceMapPath = null;
    }

    writeCodeCacheFile(cacheFilePath, code);
    return {
      code,
<<<<<<< HEAD
      originalCode: content,
=======
      mapCoverage,
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
      sourceMapPath
    };
  }

<<<<<<< HEAD
  transformSource(filepath, content, options) {
    const filename = (0, _jestUtil().tryRealpath)(filepath);
    const {transformer, transformerConfig = {}} =
      this._getTransformer(filename) || {};

    const cacheFilePath = this._getFileCachePath(filename, content, options);

    const sourceMapPath = cacheFilePath + '.map'; // Ignore cache if `config.cache` is set (--no-cache)

    const code = this._config.cache ? readCodeCacheFile(cacheFilePath) : null;

    if (code) {
      // This is broken: we return the code, and a path for the source map
      // directly from the cache. But, nothing ensures the source map actually
      // matches that source code. They could have gotten out-of-sync in case
      // two separate processes write concurrently to the same cache files.
      return {
        code,
        originalCode: content,
        sourceMapPath
      };
    }

    let processed = null;
    let shouldCallTransform = false;

    if (transformer && this.shouldTransform(filename)) {
      shouldCallTransform = true;
      assertSyncTransformer(transformer, this._getTransformPath(filename));
      processed = transformer.process(content, filename, {
        ...options,
        cacheFS: this._cacheFS,
        config: this._config,
        configString: this._cache.configString,
        transformerConfig
      });
    }

    return this._buildTransformResult(
      filename,
      cacheFilePath,
      content,
      transformer,
      shouldCallTransform,
      options,
      processed,
      sourceMapPath
    );
  }

  async transformSourceAsync(filepath, content, options) {
    const filename = (0, _jestUtil().tryRealpath)(filepath);
    const {transformer, transformerConfig = {}} =
      this._getTransformer(filename) || {};
    const cacheFilePath = await this._getFileCachePathAsync(
      filename,
      content,
      options
    );
    const sourceMapPath = cacheFilePath + '.map'; // Ignore cache if `config.cache` is set (--no-cache)

    const code = this._config.cache ? readCodeCacheFile(cacheFilePath) : null;

    if (code) {
      // This is broken: we return the code, and a path for the source map
      // directly from the cache. But, nothing ensures the source map actually
      // matches that source code. They could have gotten out-of-sync in case
      // two separate processes write concurrently to the same cache files.
      return {
        code,
        originalCode: content,
        sourceMapPath
      };
    }

    let processed = null;
    let shouldCallTransform = false;

    if (transformer && this.shouldTransform(filename)) {
      shouldCallTransform = true;
      const process = transformer.processAsync || transformer.process; // This is probably dead code since `_getTransformerAsync` already asserts this

      invariant(
        typeof process === 'function',
        'A transformer must always export either a `process` or `processAsync`'
      );
      processed = await process(content, filename, {
        ...options,
        cacheFS: this._cacheFS,
        config: this._config,
        configString: this._cache.configString,
        transformerConfig
      });
    }

    return this._buildTransformResult(
      filename,
      cacheFilePath,
      content,
      transformer,
      shouldCallTransform,
      options,
      processed,
      sourceMapPath
    );
  }

  async _transformAndBuildScriptAsync(
    filename,
    options,
    transformOptions,
    fileSource
  ) {
    const {isInternalModule} = options;
    let fileContent =
      fileSource !== null && fileSource !== void 0
        ? fileSource
        : this._cacheFS.get(filename);

    if (!fileContent) {
      fileContent = fs().readFileSync(filename, 'utf8');

      this._cacheFS.set(filename, fileContent);
    }

    const content = stripShebang(fileContent);
    let code = content;
    let sourceMapPath = null;
    const willTransform =
      !isInternalModule &&
      (transformOptions.instrument || this.shouldTransform(filename));

    try {
      if (willTransform) {
        const transformedSource = await this.transformSourceAsync(
          filename,
          content,
          transformOptions
        );
        code = transformedSource.code;
        sourceMapPath = transformedSource.sourceMapPath;
      }

      return {
        code,
        originalCode: content,
        sourceMapPath
      };
    } catch (e) {
      throw (0, _enhanceUnexpectedTokenMessage.default)(e);
    }
  }

  _transformAndBuildScript(filename, options, transformOptions, fileSource) {
    const {isInternalModule} = options;
    let fileContent =
      fileSource !== null && fileSource !== void 0
        ? fileSource
        : this._cacheFS.get(filename);

    if (!fileContent) {
      fileContent = fs().readFileSync(filename, 'utf8');

      this._cacheFS.set(filename, fileContent);
    }

    const content = stripShebang(fileContent);
    let code = content;
    let sourceMapPath = null;
    const willTransform =
      !isInternalModule &&
      (transformOptions.instrument || this.shouldTransform(filename));

    try {
=======
  _transformAndBuildScript(filename, options, instrument, fileSource) {
    const isInternalModule = !!(options && options.isInternalModule);
    const isCoreModule = !!(options && options.isCoreModule);
    const content = stripShebang(
      fileSource || _gracefulFs().default.readFileSync(filename, 'utf8')
    );
    let wrappedCode;
    let sourceMapPath = null;
    let mapCoverage = false;
    const willTransform =
      !isInternalModule &&
      !isCoreModule &&
      (this.shouldTransform(filename) || instrument);

    try {
      const extraGlobals = (options && options.extraGlobals) || [];

>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
      if (willTransform) {
        const transformedSource = this.transformSource(
          filename,
          content,
<<<<<<< HEAD
          transformOptions
        );
        code = transformedSource.code;
        sourceMapPath = transformedSource.sourceMapPath;
      }

      return {
        code,
        originalCode: content,
        sourceMapPath
      };
    } catch (e) {
      throw (0, _enhanceUnexpectedTokenMessage.default)(e);
    }
  }

  async transformAsync(filename, options, fileSource) {
    const instrument =
      options.coverageProvider === 'babel' &&
      (0, _shouldInstrument.default)(filename, options, this._config);
    const scriptCacheKey = getScriptCacheKey(filename, instrument);

    let result = this._cache.transformedFiles.get(scriptCacheKey);

    if (result) {
      return result;
    }

    result = await this._transformAndBuildScriptAsync(
      filename,
      options,
      {...options, instrument},
      fileSource
    );

    if (scriptCacheKey) {
      this._cache.transformedFiles.set(scriptCacheKey, result);
    }

    return result;
  }

  transform(filename, options, fileSource) {
    const instrument =
      options.coverageProvider === 'babel' &&
      (0, _shouldInstrument.default)(filename, options, this._config);
    const scriptCacheKey = getScriptCacheKey(filename, instrument);

    let result = this._cache.transformedFiles.get(scriptCacheKey);

    if (result) {
      return result;
    }

    result = this._transformAndBuildScript(
      filename,
      options,
      {...options, instrument},
=======
          instrument
        );
        wrappedCode = wrap(transformedSource.code, ...extraGlobals);
        sourceMapPath = transformedSource.sourceMapPath;
        mapCoverage = transformedSource.mapCoverage;
      } else {
        wrappedCode = wrap(content, ...extraGlobals);
      }

      return {
        mapCoverage,
        script: new (_vm()).default.Script(wrappedCode, {
          displayErrors: true,
          filename: isCoreModule ? 'jest-nodejs-core-' + filename : filename
        }),
        sourceMapPath
      };
    } catch (e) {
      if (e.codeFrame) {
        e.stack = e.message + '\n' + e.codeFrame;
      }

      if (
        e instanceof SyntaxError &&
        e.message.includes('Unexpected token') &&
        !e.message.includes(' expected')
      ) {
        throw (0, _enhanceUnexpectedTokenMessage.default)(e);
      }

      throw e;
    }
  }

  transform(filename, options, fileSource) {
    let scriptCacheKey = undefined;
    let instrument = false;

    if (!options.isCoreModule) {
      instrument = (0, _shouldInstrument.default)(
        filename,
        options,
        this._config
      );
      scriptCacheKey = getScriptCacheKey(filename, instrument);

      const result = this._cache.transformedFiles.get(scriptCacheKey);

      if (result) {
        return result;
      }
    }

    const result = this._transformAndBuildScript(
      filename,
      options,
      instrument,
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
      fileSource
    );

    if (scriptCacheKey) {
      this._cache.transformedFiles.set(scriptCacheKey, result);
    }

    return result;
  }

  transformJson(filename, options, fileSource) {
<<<<<<< HEAD
    const {isInternalModule} = options;
    const willTransform = !isInternalModule && this.shouldTransform(filename);

    if (willTransform) {
      const {code: transformedJsonSource} = this.transformSource(
        filename,
        fileSource,
        {...options, instrument: false}
      );
=======
    const isInternalModule = options.isInternalModule;
    const isCoreModule = options.isCoreModule;
    const willTransform =
      !isInternalModule && !isCoreModule && this.shouldTransform(filename);

    if (willTransform) {
      const _this$transformSource = this.transformSource(
          filename,
          fileSource,
          false
        ),
        transformedJsonSource = _this$transformSource.code;

>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
      return transformedJsonSource;
    }

    return fileSource;
  }

<<<<<<< HEAD
  async requireAndTranspileModule(
    moduleName,
    callback,
    options = {
      applyInteropRequireDefault: true,
      instrument: false,
      supportsDynamicImport: false,
      supportsExportNamespaceFrom: false,
      supportsStaticESM: false,
      supportsTopLevelAwait: false
    }
  ) {
    let transforming = false;
    const {applyInteropRequireDefault, ...transformOptions} = options;
=======
  requireAndTranspileModule(moduleName, callback) {
    // Load the transformer to avoid a cycle where we need to load a
    // transformer in order to transform it in the require hooks
    this.preloadTransformer(moduleName);
    let transforming = false;
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    const revertHook = (0, _pirates().addHook)(
      (code, filename) => {
        try {
          transforming = true;
<<<<<<< HEAD
          return (
            this.transformSource(filename, code, transformOptions).code || code
          );
=======
          return this.transformSource(filename, code, false).code || code;
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
        } finally {
          transforming = false;
        }
      },
      {
<<<<<<< HEAD
        exts: this._config.moduleFileExtensions.map(ext => `.${ext}`),
=======
        exts: [_path().default.extname(moduleName)],
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
        ignoreNodeModules: false,
        matcher: filename => {
          if (transforming) {
            // Don't transform any dependency required by the transformer itself
            return false;
          }

          return this.shouldTransform(filename);
        }
      }
    );

<<<<<<< HEAD
    try {
      const module = await (0, _jestUtil().requireOrImportModule)(
        moduleName,
        applyInteropRequireDefault
      );

      if (!callback) {
        revertHook();
        return module;
      }

=======
    const module = require(moduleName);

    if (!callback) {
      revertHook();
      return module;
    }

    try {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
      const cbResult = callback(module);

      if ((0, _jestUtil().isPromise)(cbResult)) {
        return waitForPromiseWithCleanup(cbResult, revertHook).then(
          () => module
        );
      }
<<<<<<< HEAD

      return module;
    } finally {
      revertHook();
    }
=======
    } finally {
      revertHook();
    }

    return module;
  }
  /**
   * @deprecated use `this.shouldTransform` instead
   */
  // @ts-ignore: Unused and private - remove in Jest 25

  _shouldTransform(filename) {
    return this.shouldTransform(filename);
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
  }

  shouldTransform(filename) {
    const ignoreRegexp = this._cache.ignorePatternsRegExp;
    const isIgnored = ignoreRegexp ? ignoreRegexp.test(filename) : false;
<<<<<<< HEAD
    return this._config.transform.length !== 0 && !isIgnored;
  }
} // TODO: do we need to define the generics twice?

async function createTranspilingRequire(config) {
  const transformer = await createScriptTransformer(config);
  return async function requireAndTranspileModule(
    resolverPath,
    applyInteropRequireDefault = false
  ) {
    const transpiledModule = await transformer.requireAndTranspileModule(
      resolverPath,
      () => {},
      {
        applyInteropRequireDefault,
        instrument: false,
        supportsDynamicImport: false,
        // this might be true, depending on node version.
        supportsExportNamespaceFrom: false,
        supportsStaticESM: false,
        supportsTopLevelAwait: false
      }
    );
    return transpiledModule;
  };
}

const removeFile = path => {
  try {
    fs().unlinkSync(path);
  } catch {}
=======
    return (
      !!this._config.transform && !!this._config.transform.length && !isIgnored
    );
  }
}

exports.default = ScriptTransformer;

_defineProperty(ScriptTransformer, 'EVAL_RESULT_VARIABLE', void 0);

const removeFile = path => {
  try {
    _gracefulFs().default.unlinkSync(path);
  } catch (e) {}
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
};

const stripShebang = content => {
  // If the file data starts with a shebang remove it. Leaves the empty line
  // to keep stack trace line numbers correct.
  if (content.startsWith('#!')) {
    return content.replace(/^#!.*/, '');
  } else {
    return content;
  }
};
/**
 * This is like `writeCacheFile` but with an additional sanity checksum. We
 * cannot use the same technique for source maps because we expose source map
 * cache file paths directly to callsites, with the expectation they can read
 * it right away. This is not a great system, because source map cache file
 * could get corrupted, out-of-sync, etc.
 */

function writeCodeCacheFile(cachePath, code) {
<<<<<<< HEAD
  const checksum = (0, _crypto().createHash)('md5').update(code).digest('hex');
=======
  const checksum = _crypto()
    .default.createHash('md5')
    .update(code)
    .digest('hex');

>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
  writeCacheFile(cachePath, checksum + '\n' + code);
}
/**
 * Read counterpart of `writeCodeCacheFile`. We verify that the content of the
 * file matches the checksum, in case some kind of corruption happened. This
 * could happen if an older version of `jest-runtime` writes non-atomically to
 * the same cache, for example.
 */

function readCodeCacheFile(cachePath) {
  const content = readCacheFile(cachePath);

  if (content == null) {
    return null;
  }

<<<<<<< HEAD
  const code = content.substring(33);
  const checksum = (0, _crypto().createHash)('md5').update(code).digest('hex');

  if (checksum === content.substring(0, 32)) {
=======
  const code = content.substr(33);

  const checksum = _crypto()
    .default.createHash('md5')
    .update(code)
    .digest('hex');

  if (checksum === content.substr(0, 32)) {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    return code;
  }

  return null;
}
/**
 * Writing to the cache atomically relies on 'rename' being atomic on most
 * file systems. Doing atomic write reduces the risk of corruption by avoiding
 * two processes to write to the same file at the same time. It also reduces
 * the risk of reading a file that's being overwritten at the same time.
 */

const writeCacheFile = (cachePath, fileData) => {
  try {
<<<<<<< HEAD
    (0, _writeFileAtomic().sync)(cachePath, fileData, {
      encoding: 'utf8',
      fsync: false
=======
    _writeFileAtomic().default.sync(cachePath, fileData, {
      encoding: 'utf8'
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    });
  } catch (e) {
    if (cacheWriteErrorSafeToIgnore(e, cachePath)) {
      return;
    }

    e.message =
      'jest: failed to cache transform results in: ' +
      cachePath +
      '\nFailure message: ' +
      e.message;
    removeFile(cachePath);
    throw e;
  }
};
/**
 * On Windows, renames are not atomic, leading to EPERM exceptions when two
 * processes attempt to rename to the same target file at the same time.
 * If the target file exists we can be reasonably sure another process has
 * legitimately won a cache write race and ignore the error.
 */

const cacheWriteErrorSafeToIgnore = (e, cachePath) =>
  process.platform === 'win32' &&
  e.code === 'EPERM' &&
<<<<<<< HEAD
  fs().existsSync(cachePath);

const readCacheFile = cachePath => {
  if (!fs().existsSync(cachePath)) {
=======
  _gracefulFs().default.existsSync(cachePath);

const readCacheFile = cachePath => {
  if (!_gracefulFs().default.existsSync(cachePath)) {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    return null;
  }

  let fileData;

  try {
<<<<<<< HEAD
    fileData = fs().readFileSync(cachePath, 'utf8');
=======
    fileData = _gracefulFs().default.readFileSync(cachePath, 'utf8');
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
  } catch (e) {
    e.message =
      'jest: failed to read cache file: ' +
      cachePath +
      '\nFailure message: ' +
      e.message;
    removeFile(cachePath);
    throw e;
  }

  if (fileData == null) {
    // We must have somehow created the file but failed to write to it,
    // let's delete it and retry.
    removeFile(cachePath);
  }

  return fileData;
};

const getScriptCacheKey = (filename, instrument) => {
<<<<<<< HEAD
  const mtime = fs().statSync(filename).mtime;
=======
  const mtime = _gracefulFs().default.statSync(filename).mtime;

>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
  return filename + '_' + mtime.getTime() + (instrument ? '_instrumented' : '');
};

const calcIgnorePatternRegExp = config => {
  if (
    !config.transformIgnorePatterns ||
    config.transformIgnorePatterns.length === 0
  ) {
    return undefined;
  }

  return new RegExp(config.transformIgnorePatterns.join('|'));
};

const calcTransformRegExp = config => {
  if (!config.transform.length) {
    return undefined;
  }

  const transformRegexp = [];

  for (let i = 0; i < config.transform.length; i++) {
    transformRegexp.push([
      new RegExp(config.transform[i][0]),
      config.transform[i][1],
      config.transform[i][2]
    ]);
  }

  return transformRegexp;
};

<<<<<<< HEAD
function invariant(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

function assertSyncTransformer(transformer, name) {
  invariant(name);
  invariant(
    typeof transformer.process === 'function',
    (0, _runtimeErrorsAndWarnings.makeInvalidSyncTransformerError)(name)
  );
}

async function createScriptTransformer(config, cacheFS = new Map()) {
  const transformer = new ScriptTransformer(config, cacheFS);
  await transformer.loadTransformers();
  return transformer;
}
=======
const wrap = (content, ...extras) => {
  const globals = new Set([
    'module',
    'exports',
    'require',
    '__dirname',
    '__filename',
    'global',
    'jest',
    ...extras
  ]);
  return (
    '({"' +
    ScriptTransformer.EVAL_RESULT_VARIABLE +
    `":function(${Array.from(globals).join(',')}){` +
    content +
    '\n}});'
  );
}; // TODO: Can this be added to the static property?

ScriptTransformer.EVAL_RESULT_VARIABLE = 'Object.<anonymous>';
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
