"use strict";

<<<<<<< HEAD
const {platform, type} = require("os");

const supportedPlatforms = new Set([
  "aix",
=======
const os = require("os");
const platform = os.platform();

if ([
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
  "android",
  "darwin",
  "freebsd",
  "linux",
  "openbsd",
  "sunos",
<<<<<<< HEAD
  "win32"
]);

const plat = platform();

if (supportedPlatforms.has(plat)) {
  let file = plat;
  if (plat === "aix") {
    file = type() === "OS400" ? "ibmi" : "sunos"; // AIX `netstat` output is compatible with Solaris
  }

  const m = require(`./${file}.js`);
=======
  "win32",
  "aix",
].indexOf(platform) !== -1) {
  let file;
  if (platform === "aix") {
    // AIX `netstat` output is compatible with Solaris
    file = `${os.type() === "OS400" ? "ibmi" : "sunos"}.js`;
  } else {
    file = `${platform}.js`;
  }

  const m = require(`./${file}`);
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
  module.exports.v4 = () => m.v4();
  module.exports.v6 = () => m.v6();
  module.exports.v4.sync = () => m.v4.sync();
  module.exports.v6.sync = () => m.v6.sync();
} else {
<<<<<<< HEAD
  const err = new Error(`Unsupported Platform: ${plat}`);
  module.exports.v4 = () => Promise.reject(err);
  module.exports.v6 = () => Promise.reject(err);
  module.exports.v4.sync = () => { throw err; };
  module.exports.v6.sync = () => { throw err; };
=======
  const unsupported = () => { throw new Error(`Unsupported Platform: ${platform}`); };
  module.exports.v4 = unsupported;
  module.exports.v6 = unsupported;
  module.exports.v4.sync = unsupported;
  module.exports.v6.sync = unsupported;
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
}
