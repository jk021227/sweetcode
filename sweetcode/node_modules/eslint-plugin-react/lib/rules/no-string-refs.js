/**
 * @fileoverview Prevent string definitions for references and prevent referencing this.refs
 * @author Tom Hastjarjanto
 */

'use strict';

<<<<<<< HEAD
const componentUtil = require('../util/componentUtil');
const docsUrl = require('../util/docsUrl');
const report = require('../util/report');
const testReactVersion = require('../util/version').testReactVersion;
=======
const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

<<<<<<< HEAD
const messages = {
  thisRefsDeprecated: 'Using this.refs is deprecated.',
  stringInRefDeprecated: 'Using string literals in ref attributes is deprecated.',
};

/** @type {import('eslint').Rule.RuleModule} */
module.exports = {
  meta: {
    docs: {
      description: 'Disallow using string references',
      category: 'Best Practices',
      recommended: true,
      url: docsUrl('no-string-refs'),
    },

    messages,

=======
module.exports = {
  meta: {
    docs: {
      description: 'Prevent string definitions for references and prevent referencing this.refs',
      category: 'Best Practices',
      recommended: true,
      url: docsUrl('no-string-refs')
    },
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    schema: [{
      type: 'object',
      properties: {
        noTemplateLiterals: {
<<<<<<< HEAD
          type: 'boolean',
        },
      },
      additionalProperties: false,
    }],
  },

  create(context) {
    const checkRefsUsage = testReactVersion(context, '< 18.3.0'); // `this.refs` is writable in React 18.3.0 and later, see https://github.com/facebook/react/pull/28867
=======
          type: 'boolean'
        }
      },
      additionalProperties: false
    }]
  },

  create: Components.detect((context, components, utils) => {
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    const detectTemplateLiterals = context.options[0] ? context.options[0].noTemplateLiterals : false;
    /**
     * Checks if we are using refs
     * @param {ASTNode} node The AST node being checked.
<<<<<<< HEAD
     * @returns {boolean} True if we are using refs, false if not.
     */
    function isRefsUsage(node) {
      return !!(
        (componentUtil.getParentES6Component(context, node) || componentUtil.getParentES5Component(context, node))
        && node.object.type === 'ThisExpression'
        && node.property.name === 'refs'
=======
     * @returns {Boolean} True if we are using refs, false if not.
     */
    function isRefsUsage(node) {
      return Boolean(
        (
          utils.getParentES6Component() ||
          utils.getParentES5Component()
        ) &&
        node.object.type === 'ThisExpression' &&
        node.property.name === 'refs'
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
      );
    }

    /**
     * Checks if we are using a ref attribute
     * @param {ASTNode} node The AST node being checked.
<<<<<<< HEAD
     * @returns {boolean} True if we are using a ref attribute, false if not.
     */
    function isRefAttribute(node) {
      return node.type === 'JSXAttribute'
        && !!node.name
        && node.name.name === 'ref';
=======
     * @returns {Boolean} True if we are using a ref attribute, false if not.
     */
    function isRefAttribute(node) {
      return Boolean(
        node.type === 'JSXAttribute' &&
        node.name &&
        node.name.name === 'ref'
      );
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    }

    /**
     * Checks if a node contains a string value
     * @param {ASTNode} node The AST node being checked.
<<<<<<< HEAD
     * @returns {boolean} True if the node contains a string value, false if not.
     */
    function containsStringLiteral(node) {
      return !!node.value
        && node.value.type === 'Literal'
        && typeof node.value.value === 'string';
=======
     * @returns {Boolean} True if the node contains a string value, false if not.
     */
    function containsStringLiteral(node) {
      return Boolean(
        node.value &&
        node.value.type === 'Literal' &&
        typeof node.value.value === 'string'
      );
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    }

    /**
     * Checks if a node contains a string value within a jsx expression
     * @param {ASTNode} node The AST node being checked.
<<<<<<< HEAD
     * @returns {boolean} True if the node contains a string value within a jsx expression, false if not.
     */
    function containsStringExpressionContainer(node) {
      return !!node.value
        && node.value.type === 'JSXExpressionContainer'
        && node.value.expression
        && ((node.value.expression.type === 'Literal' && typeof node.value.expression.value === 'string')
        || (node.value.expression.type === 'TemplateLiteral' && detectTemplateLiterals));
=======
     * @returns {Boolean} True if the node contains a string value within a jsx expression, false if not.
     */
    function containsStringExpressionContainer(node) {
      return Boolean(
        node.value &&
        node.value.type === 'JSXExpressionContainer' &&
        node.value.expression &&
        ((node.value.expression.type === 'Literal' && typeof node.value.expression.value === 'string') ||
        (node.value.expression.type === 'TemplateLiteral' && detectTemplateLiterals))
      );
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
    }

    return {
      MemberExpression(node) {
<<<<<<< HEAD
        if (checkRefsUsage && isRefsUsage(node)) {
          report(context, messages.thisRefsDeprecated, 'thisRefsDeprecated', {
            node,
          });
        }
      },

      JSXAttribute(node) {
        if (
          isRefAttribute(node)
          && (containsStringLiteral(node) || containsStringExpressionContainer(node))
        ) {
          report(context, messages.stringInRefDeprecated, 'stringInRefDeprecated', {
            node,
          });
        }
      },
    };
  },
=======
        if (isRefsUsage(node)) {
          context.report({
            node,
            message: 'Using this.refs is deprecated.'
          });
        }
      },
      JSXAttribute(node) {
        if (
          isRefAttribute(node) &&
          (containsStringLiteral(node) || containsStringExpressionContainer(node))
        ) {
          context.report({
            node,
            message: 'Using string literals in ref attributes is deprecated.'
          });
        }
      }
    };
  })
>>>>>>> 8aded176e2bf64ab331edd712b5a251ef6940ffa
};
